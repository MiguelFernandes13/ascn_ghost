---
#create a service for ghost
- name: Create a service for Ghost
  kubernetes.core.k8s:
    state: present
    namespace: default
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: ghost-service 
        labels:
          app: ghost
      spec:
        type: LoadBalancer
        selector:
          app: ghost
        ports:
          - protocol: TCP
            port: 80
            targetPort: 2368

- name: run kubectl to retreive external IP - Wait for task to complete
  shell: "kubectl get -n default service ghost-service -o wide | awk '{ print $4}' |  grep -v EXT"
  register: k_ext_ip
  until: k_ext_ip.stdout[0] != "<"
  retries: 15
  delay: 15

#Get the service
- name: Get the service IP
  kubernetes.core.k8s_info:
    kind: Service
    label_selectors:
      - app=ghost
  register: ghost_service

- name: Set the service IP
  set_fact:
    ghost_service_ip: "{{ ghost_service.resources[0].status.loadBalancer.ingress[0].ip }}"

- name: Change gcp inventory file
  template:
    src: gcp
    dest: inventory/gcp.yml

#Create a Deployment to deploy ghost
- name: Create a Deployment for Ghost
  kubernetes.core.k8s:
    state: present
    namespace: default
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ghost-deployment
        labels:
          app: ghost
      spec:
        selector:
          matchLabels:
            app: ghost
        template:
          metadata:
            labels:
              app: ghost
          spec:
            containers:
            - name: ghost
              image: ghost:5.14.1
              ports:
              - containerPort: 2368
              resources:
                requests:
                  cpu: "250m"
              env:
              - name: url
                value: "http://{{ ghost_service_ip }}:{{ ghost_port }}"
              - name: database__client
                value: mysql
              - name: database__connection__host
                value: "{{ MYSQL_HOST }}"
              - name: database__connection__user
                value: "{{ MYSQL_USER }}"
              - name: database__connection__password
                value: "{{ MYSQL_PASSWORD }}"
              - name: database__connection__database
                value: "{{ MYSQL_DATABASE }}"
              - name: database__connection__port
                value: "3306"
              - name: mail__transport
                value: SMTP
              - name: mail__options__service
                value: Mailgun
              - name: mail__options__auth__user
                value: "{{ ghost_email }}"
              - name: adapters__cache__redis-cache__host
                value: "localhost"
              - name: adapters__cache__redis-cache__port
                value: 6379
              - name: adapters__cache__redis-cache__password
                value: {{ blog_password }}
              - name: adapters__cache__imageSizes__adapter
                value: redis-cache
              - name: adapters__cache__imageSizes__ttl
                value: 3600

- name: Get pod name
  shell: kubectl get pods -n default -l app=ghost -o jsonpath='{.items[0].metadata.name}'
  register: pod_name

- name: Change the ghost config file 
  shell: kubectl cp config.production.json {{ pod_name.stdout }}:/var/lib/ghost/config.production.json -n default 

- name: Restart the ghost pod
  shell: kubectl rollout restart deployment ghost-deployment -n default


- name: Autoscale for Ghost app
  kubernetes.core.k8s:
    state: present
    namespace: default
    definition:
      apiVersion: autoscaling/v2beta2
      kind: HorizontalPodAutoscaler
      metadata:
        name: ghost-hpa
        labels:
          app: ghost
      spec:
        scaleTargetRef:
          apiVersion: apps/v1
          kind: Deployment
          name: ghost-deployment
        minReplicas: 1
        maxReplicas: 15
        metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 50

- name: Wait for Autoscale be ready
  shell: kubectl get hpa ghost-hpa -o jsonpath='{.status.currentReplicas}'
  register: hpa_ready
  until: hpa_ready.stdout.find("1") != -1
  retries: 15
  delay: 15


- name: get db pod
  kubernetes.core.k8s_info:
    kind: Pod
    label_selectors:
      - app=mysql
  register: db_pod

- name: Wait for db pod is ready
  shell: kubectl get pod {{ db_pod.resources[0].metadata.name }} -o jsonpath='{.status.phase}'
  register: db_pod_ready
  until: db_pod_ready.stdout.find("Running") != -1
  retries: 20
  delay: 20

- name: Wait for table users is created
  shell: kubectl exec -it {{ db_pod.resources[0].metadata.name }} -- /bin/bash -c "mysql -D ghost -e \"SELECT count(*) FROM information_schema.tables WHERE table_schema = 'ghost' AND table_name = 'users'\""
  register: table_users
  until: table_users.stdout.find("1") != -1
  retries: 15
  delay: 15

#- name: Install bcrypt
#  shell: python3 -m pip install bcrypt
#
#- name: Encrypt password for blog admin
#  shell: python3 -c "import bcrypt; print(bcrypt.hashpw(b'{{ blog_password }}', bcrypt.gensalt(rounds=10)).decode('ascii'))"
#  register: encrypted_password
#
#- name: Escape '$' in encrypted password
#  shell: python3 -c "import re; print(re.sub(r'\\$', r'\\\\$', '{{ encrypted_password.stdout }}'))"
#  register: escaped_password
#
#- name: Create a blog admin and ensure it is created
#  shell: kubectl exec -it {{ db_pod.resources[0].metadata.name }} -- /bin/bash -c "mysql -D {{ MYSQL_DATABASE}} -e \"UPDATE users SET name='{{ blog_name }}', password='{{ escaped_password.stdout }}', email='{{ blog_email }}', status='active' where id=1; SELECT * FROM users WHERE id=1;\""
#  register: blog_admin
#  until: blog_admin.stdout.find("ascn") != -1
#  retries: 15
#  delay: 10

- name: Create a blog admin and ensure it is created
  shell: kubectl exec -it {{ db_pod.resources[0].metadata.name }} -- /bin/bash -c "mysql -D {{ MYSQL_DATABASE}} -e \"UPDATE users SET name='{{ blog_name }}', password='\\\$2b\\\$10\\\$KgUaqGwMRhJH8IeyeYp1MOelsB9KlYjczsiujTLBR4S2lmNqGEMI2', email='{{ blog_email }}', status='active' where id=1; SELECT * FROM users WHERE id=1;\""
  register: blog_admin
  until: blog_admin.stdout.find("ascn") != -1
  retries: 15
  delay: 10